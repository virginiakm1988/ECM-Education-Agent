import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { RocketLaunchIcon, DocumentArrowUpIcon, CodeBracketIcon } from '@heroicons/react/24/outline';
import toast from 'react-hot-toast';

function DevelopmentGuide() {
  const [currentState, setCurrentState] = useState({
    scripts: '',
    dataFiles: '',
    documentation: '',
    otherFiles: ''
  });
  const [userDescription, setUserDescription] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [suggestions, setSuggestions] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setIsLoading(true);

    try {
      // Parse the input into arrays
      const stateObj = {
        scripts: currentState.scripts.split('\n').filter(f => f.trim()),
        data_files: currentState.dataFiles.split('\n').filter(f => f.trim()),
        documentation: currentState.documentation.split('\n').filter(f => f.trim()),
        other_files: currentState.otherFiles.split('\n').filter(f => f.trim())
      };

      // Simulate API call
      const response = await fetch('/api/development-guide', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          current_state: stateObj,
          user_description: userDescription
        })
      });

      if (!response.ok) throw new Error('API call failed');
      
      const data = await response.json();
      setSuggestions(data.suggestions);
      toast.success('Development suggestions generated!');

    } catch (error) {
      // Fallback demo response
      setSuggestions(`
# ECM Development Suggestions

Based on your current repository state, here are recommendations to improve ECM compliance:

## Option A: Environment Documentation
**What to add**: Create a requirements.txt or environment.yml file
**Why important**: Ensures others can reproduce your computational environment
**Template**:
\`\`\`
# requirements.txt
pandas>=1.3.0
numpy>=1.20.0
matplotlib>=3.4.0
scikit-learn>=1.0.0
\`\`\`

## Option B: Execution Documentation
**What to add**: Create a run.sh or main execution script
**Why important**: Shows the exact steps to reproduce your results
**Template**:
\`\`\`bash
#!/bin/bash
# run.sh - Main execution script
python preprocess.py --input data/raw.csv --output data/processed.csv
python analysis.py --data data/processed.csv --output results/
python visualize.py --results results/ --output figures/
\`\`\`

## Option C: Data Provenance
**What to add**: Create a data_provenance.md file
**Why important**: Documents the source and transformation of all data
**Template**:
\`\`\`markdown
# Data Provenance

## Raw Data Sources
- dataset.csv: Downloaded from [source] on [date]
- parameters.json: Generated by [method] 

## Processing Steps
1. preprocess.py: Cleans and normalizes data
2. analysis.py: Performs statistical analysis
3. Results stored in results/ directory
\`\`\`

## Next Steps
1. Choose one or more options above
2. Implement the suggested files
3. Test your workflow end-to-end
4. Document any additional dependencies or steps
      `);
      toast.success('Demo suggestions generated!');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="max-w-4xl mx-auto space-y-8">
      {/* Header */}
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
        className="text-center"
      >
        <div className="flex items-center justify-center w-16 h-16 mx-auto mb-4 bg-blue-100 rounded-full">
          <RocketLaunchIcon className="w-8 h-8 text-blue-600" />
        </div>
        <h1 className="text-3xl font-bold text-gray-900 mb-4">ECM Development Guide</h1>
        <p className="text-lg text-gray-600">
          Get personalized suggestions for making your research software ECM-compliant
        </p>
      </motion.div>

      {/* Form */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.2 }}
        className="card"
      >
        <h2 className="text-xl font-semibold text-gray-900 mb-6">Current Repository State</h2>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <CodeBracketIcon className="w-5 h-5 inline mr-2" />
                Scripts/Code Files
              </label>
              <textarea
                value={currentState.scripts}
                onChange={(e) => setCurrentState({...currentState, scripts: e.target.value})}
                placeholder="analysis.py&#10;preprocess.R&#10;visualize.m"
                className="textarea-field"
                rows={4}
              />
              <p className="text-sm text-gray-500 mt-1">List your script files (one per line)</p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                <DocumentArrowUpIcon className="w-5 h-5 inline mr-2" />
                Data Files
              </label>
              <textarea
                value={currentState.dataFiles}
                onChange={(e) => setCurrentState({...currentState, dataFiles: e.target.value})}
                placeholder="dataset.csv&#10;results.json&#10;config.yml"
                className="textarea-field"
                rows={4}
              />
              <p className="text-sm text-gray-500 mt-1">List your data files (one per line)</p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Documentation
              </label>
              <textarea
                value={currentState.documentation}
                onChange={(e) => setCurrentState({...currentState, documentation: e.target.value})}
                placeholder="README.md&#10;methodology.pdf"
                className="textarea-field"
                rows={4}
              />
              <p className="text-sm text-gray-500 mt-1">List your documentation files</p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Other Files
              </label>
              <textarea
                value={currentState.otherFiles}
                onChange={(e) => setCurrentState({...currentState, otherFiles: e.target.value})}
                placeholder="requirements.txt&#10;Dockerfile&#10;Makefile"
                className="textarea-field"
                rows={4}
              />
              <p className="text-sm text-gray-500 mt-1">List other relevant files</p>
            </div>
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Project Description
            </label>
            <textarea
              value={userDescription}
              onChange={(e) => setUserDescription(e.target.value)}
              placeholder="Describe your research project, goals, and current challenges..."
              className="textarea-field"
              rows={4}
            />
          </div>

          <button
            type="submit"
            disabled={isLoading}
            className="btn-primary w-full flex items-center justify-center"
          >
            {isLoading ? (
              <>
                <div className="loading-spinner mr-2"></div>
                Analyzing Repository...
              </>
            ) : (
              'Get Development Suggestions'
            )}
          </button>
        </form>
      </motion.div>

      {/* Results */}
      {suggestions && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.6 }}
          className="card"
        >
          <h2 className="text-xl font-semibold text-gray-900 mb-4">ECM Development Suggestions</h2>
          <div className="prose max-w-none">
            <div className="whitespace-pre-wrap">{suggestions}</div>
          </div>
        </motion.div>
      )}

      {/* Info Cards */}
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.4 }}
        className="grid grid-cols-1 md:grid-cols-2 gap-6"
      >
        <div className="card">
          <h3 className="text-lg font-semibold text-gray-900 mb-3">ECM Best Practices</h3>
          <ul className="space-y-2 text-gray-600">
            <li className="flex items-start">
              <span className="w-2 h-2 bg-primary-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
              Document all dependencies and versions
            </li>
            <li className="flex items-start">
              <span className="w-2 h-2 bg-primary-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
              Create clear execution instructions
            </li>
            <li className="flex items-start">
              <span className="w-2 h-2 bg-primary-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
              Track data provenance and transformations
            </li>
            <li className="flex items-start">
              <span className="w-2 h-2 bg-primary-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
              Include example data and expected outputs
            </li>
          </ul>
        </div>

        <div className="card">
          <h3 className="text-lg font-semibold text-gray-900 mb-3">Common Improvements</h3>
          <ul className="space-y-2 text-gray-600">
            <li className="flex items-start">
              <span className="w-2 h-2 bg-green-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
              Add requirements.txt or environment.yml
            </li>
            <li className="flex items-start">
              <span className="w-2 h-2 bg-green-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
              Create run scripts for reproducibility
            </li>
            <li className="flex items-start">
              <span className="w-2 h-2 bg-green-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
              Document configuration parameters
            </li>
            <li className="flex items-start">
              <span className="w-2 h-2 bg-green-500 rounded-full mt-2 mr-3 flex-shrink-0"></span>
              Include logging and error handling
            </li>
          </ul>
        </div>
      </motion.div>
    </div>
  );
}

export default DevelopmentGuide;